#!/bin/bash -x
# Build a Linux kernel based on a config file
# Usage: O=./build $0 version config

die() { echo >&2 "FATAL: $*" ; exit 1 ; }
warn() { echo >&2 "WARN: $*" ; }
info() { echo >&2 "INFO: $*" ; }

LINUX_VERSION="$1"
CONFIG_FILE="$2"
TAG="$(basename "$CONFIG_FILE" .config)"

if [ ! -r "$CONFIG_FILE" ]; then
	die "$CONFIG_FILE: configuration file does not exist?"
fi

if [ -z "$O" ]; then
	O=./build
fi

if [ -z "$MAKE" ]; then
	MAKE="make -j$(nproc)"
fi

mkdir -p "$O/$TAG" || die "$O/$TAG: unable to create output directory"

LINUX="linux-${LINUX_VERSION}"
LINUX_TAR="$LINUX.tar.xz"
LINUX_SIG="$LINUX.tar.sign"
LINUX_URL="https://cdn.kernel.org/pub/linux/kernel/v5.x/$LINUX_TAR"

if [ ! -r "$O/$LINUX_TAR" ]; then
	info "Fetching $LINUX_URL"
	wget -O "$O/$LINUX_TAR.tmp" "$LINUX_URL"
	wget -nc -O "$O/$LINUX_SIG" "$(dirname $LINUX_URL)/$LINUX_SIG"
	#unxz -cd < "$O/$LINUX_TAR.tmp" | gpg2 --verify "$O/$LINUX_SIG" - || die "sig failed"
	mv "$O/$LINUX_TAR.tmp" "$O/$LINUX_TAR"
fi

if [ ! -r "$O/$LINUX/.extract" ]; then
	info "Unpacking $LINUX_TAR"
	tar -xf "$O/$LINUX_TAR" -C "$O" || die "$O/$LINUX_TAR: untar failed"
	touch "$O/$LINUX/.extract"
fi

CONFIG_HASH="$(sha256sum "$CONFIG_FILE" | cut -d\  -f1)"
OLDCONFIG_FILE="$O/$TAG/.config"

if [ "$CONFIG_FILE" -nt "$OLDCONFIG_FILE" ]; then
	info "Updating $OLDCONFIG_FILE"
	cp "$CONFIG_FILE" "$OLDCONFIG_FILE" || die "$OLDCONFIG_FILE: unable to copy"
	$MAKE \
		-C "$O/$LINUX" \
		O="../$TAG" \
		olddefconfig \
	|| die "$OLDCONFIG_FILE: olddefconfig failed"
fi

#$(LINUX)/.patched: $(LINUX_PATCH) $(LINUX)/.extract
#	patch -p0 < $<
#	ln -s ../../../module $(LINUX)/drivers/uefidev
#	touch $@

# finally ready to build!

$MAKE \
	KBUILD_HOST=builder \
	KBUILD_BUILD_USER=builder \
	KBUILD_BUILD_TIMESTAMP="$CONFIG_HASH" \
	KBUILD_BUILD_VERSION="$TAG" \
	-C "$O/$LINUX" \
	O="../$TAG" \
|| die "$O/$TAG: make failed"

cp "$O/$TAG/arch/x86/boot/bzImage" "$O/vmlinuz-$TAG" \
|| die "$O/vmlinuz-$TAG: unable to copy"

#menuconfig: $(LINUX_DOTCONFIG)
#	$(MAKE) -j1 -C $(dir $<) menuconfig savedefconfig
#	cp $(dir $<)defconfig $(LINUX_CONFIG)

