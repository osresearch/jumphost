#!/usr/bin/perl
# Populate an initrd directory with the files on the command line
use warnings;
use strict;
use File::Basename 'basename';
use File::Copy 'cp';

my $top = shift || './';
my $lib_dir = "$top/lib64";
my $bin_dir = "$top/bin";

my %libs;

my $target = $top;
$target =~ s:/$::;

open DEPS, ">", "$target.deps"
	or die "$target.deps: Unable to create dependency file: $!\n";

print DEPS "# Autogenerated by $0\n";
print DEPS "$target/gitstatus: \\\n";

# for libraries
my $UNAME = `uname -r`;
chomp($UNAME);

while(<>)
{
	chomp;

	# strip comments and skip blank lines
	s/\s*#.*$//;
	next if /^$/;


	my ($bin,$dest,$target) = split /\s+/, $_;

	if ($bin eq 'symlink')
	{
		system 'ln', '-sf', "$dest", "$top/$target"
			and die "ln $dest -> $top/$target: $!\n";
		next;
	}

	if ($bin eq 'mkdir')
	{
		system 'mkdir', '-p', "$top/$dest"
			and die "mkdir $top/$dest: $!\n";
		next;
	}

	$dest ||= "/bin";
	print DEPS "\t$bin \\\n";

	system 'mkdir', '-p', "$top/$dest"
		and die "mkdir $top/$dest: $!\n";

	$bin =~ s/\$UNAME/$UNAME/g;

	cp($bin, "$top/$dest/" . basename($bin))
		or die "cp -r $bin $top/$dest/: Unable to copy: $!\n";

	my @deps = `ldd "$bin" 2>&1`
		or next;

	for (@deps)
	{
		chomp;
		next if m/not a dynamic executable/;

		my ($short,$lib,$addr) = /^
			\s+
			(.*?\s+=>\s+)?
			(.*?)
			\s+
			\((0x[0-9a-f]*)\)
			$/msgx
		or warn "$bin: unable to parse '$_'\n"
		and next;

		next if $lib =~ /^linux-vdso/;

		push @{ $libs{$lib} ||= [] }, $bin;
	}
}

system 'mkdir', '-p', "$lib_dir";

for my $lib (sort keys %libs)
{
	print "$lib: ", join(' ', @{$libs{$lib}}), "\n";
	print DEPS "\t$lib \\\n";

	cp($lib, "$lib_dir/" . basename($lib))
		or die "$lib: Unable to copy: $!\n";
}


print DEPS "\n";
close DEPS;
